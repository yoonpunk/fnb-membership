package com.fnb.membership.fnbmembership.domain;

import lombok.Getter;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

/**
 * F&B Store information.
 */
@Entity
@Getter
public class Store {

    /**
     * Store ID.
     * The actual primary key used for utilizing the auto-increment feature of RDB,
     * which is a sequentially assigned key by the database for indexing performance purposes.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "STORE_ID")
    private Long id;

    /**
     * Store UUID
     * The sub key is used as a globally unique identifier for the entity, particularly when the data is saved in another data storage.
     * This key is generated by this application.
     */
    @Column(name = "STORE_UUID", columnDefinition = "BINARY(16)", unique = true)
    private UUID uuid;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BRAND_ID")
    private Brand brand;

    @Column(name = "STORE_NAME", unique = true)
    private String name;

    private LocalDateTime createdAt;

    protected Store() {

    }

    private Store(UUID uuid, String name, Brand brand, LocalDateTime createdAt) {
        this.uuid = uuid;
        this.name = name;
        this.brand = brand;
        this.createdAt = createdAt;
    }

    /**
     * Creates a store object with auto-generated UUID.
     * @param name
     * @param brand
     * @param createdAt
     * @return
     */
    public static Store createStoreWithUuid(
            @NotBlank String name,
            @NotNull Brand brand,
            @NotNull LocalDateTime createdAt) {
        return new Store(UUID.randomUUID(), name, brand, createdAt);
    }

    public static Store createStore(@NotNull UUID uuid, @NotBlank String name, @NotNull Brand brand, @NotNull LocalDateTime createdAt) {
        return new Store(uuid, name, brand, createdAt);
    }

    // Using UUID for comparing equality of objects.
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Brand brand = (Brand) o;
        return Objects.equals(getUuid(), brand.getUuid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUuid());
    }
}
