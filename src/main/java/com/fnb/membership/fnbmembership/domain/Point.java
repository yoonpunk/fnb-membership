package com.fnb.membership.fnbmembership.domain;

import lombok.Getter;

import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

/**
 * F&B Point Information.
 */
@Entity
@Getter
public class Point {

    /**
     * Point ID.
     * The actual primary key used for utilizing the auto-increment feature of RDB,
     * which is a sequentially assigned key by the database for indexing performance purposes.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "POINT_ID")
    private Long id;

    /**
     * Point UUID
     * The sub key is used as a globally unique identifier for the entity, particularly when the data is saved in another data storage.
     * This key is generated by this application.
     */
    @Column(name = "POINT_UUID", columnDefinition = "BINARY(16)", unique = true)
    private UUID uuid;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "MEMBER_ID")
    private Member member;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BRAND_ID")
    private Brand brand;

    private Long amount;

    private LocalDateTime createdAt;

    @Version
    private Long version;

    protected Point() {
    }

    private Point(UUID uuid, Member member, Brand brand, Long amount, LocalDateTime createdAt) {
        this.uuid = uuid;
        this.member = member;
        this.brand = brand;
        this.amount = amount;
        this.createdAt = createdAt;
    }

    /**
     * Create a Point object.
     * @param uuid
     * @param member
     * @param brand
     * @param amount
     * @param createdAt
     * @return
     */
    public static Point createPoint(@NotNull UUID uuid, @NotNull Member member, @NotNull Brand brand, @NotNull Long amount, @NotNull LocalDateTime createdAt) {
        return new Point(uuid, member, brand, amount, createdAt);
    }

    /**
     * A method to check if the earned points are sufficient.
     * @param useAmount
     * @return
     */
    public boolean isEnoughToUse(long useAmount) {
        if (amount - useAmount >= 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * A method to deduct points by the amount.
     * @param useAmount
     */
    public void usePoint(long useAmount) {
        amount -= useAmount;
    }

    /**
     * A method to earn points by the amount.
     * @param earnAmount
     */
    public void earnPoint(long earnAmount) {
        amount += earnAmount;
    }

    // Using UUID for comparing equality of objects.
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Brand brand = (Brand) o;
        return Objects.equals(getUuid(), brand.getUuid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUuid());
    }
}
