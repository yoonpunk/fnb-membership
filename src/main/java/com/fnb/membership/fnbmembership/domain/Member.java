package com.fnb.membership.fnbmembership.domain;

import lombok.Getter;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Random;
import java.util.UUID;

/**
 * F&B Member Information.
 */
@Entity
@Getter
public class Member {

    /**
     * Member ID.
     * The actual primary key used for utilizing the auto-increment feature of RDB,
     * which is a sequentially assigned key by the database for indexing performance purposes.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "MEMBER_ID")
    private Long id;

    /**
     * Member UUID
     * The sub key is used as a globally unique identifier for the entity, particularly when the data is saved in another data storage.
     * This key is generated by this application.
     */
    @Column(name = "MEMBER_UUID", columnDefinition = "BINARY(16)", unique = true, updatable = false)
    private UUID uuid;

    @Column(unique = true, length = 11)
    private String phone;

    @Column(unique = true, length = 12)
    private String barcode;

    private LocalDateTime createdAt;

    protected Member() {
    }

    private Member(UUID uuid, String phone, String barcode, LocalDateTime createdAt) {
        this.uuid = uuid;
        this.phone = phone;
        this.barcode = barcode;
        this.createdAt = createdAt;
    }

    /**
     * Creates a member object with auto-generated UUID.
     * @param phone
     * @param createdAt
     * @return
     */
    public static Member createMemberWithUuidAndBarcode(@NotBlank String phone, @NotNull LocalDateTime createdAt) {
        return new Member(UUID.randomUUID(), phone, createBarcode(), createdAt);
    }

    /**
     * Creates a member object while verifies barcode format.
     * @param uuid
     * @param phone
     * @param barcode
     * @param createdAt
     * @return
     */
    public static Member createMember(@NotNull UUID uuid, @NotBlank String phone, @NotBlank String barcode, @NotNull LocalDateTime createdAt) {

        // Verifies the passed barcode. (12 digits)
        if (!isNumberString(barcode)) {
            throw new IllegalArgumentException("Member's barcode is invalid.");
        }
        return new Member(uuid, phone, barcode, createdAt);
    }

    /**
     * A static method for creating barcode number. (Twelve-digit number)
     * @return
     */
    private static String createBarcode() {

        Random random = new Random();
        random.setSeed(System.currentTimeMillis());

        StringBuilder sb = new StringBuilder();

        for (int i=0; i<12; i++) {
            sb.append(Integer.toString(random.nextInt(10)));
        }

        return sb.toString();
    }

    /**
     * A method to verify barcode number. (12 digits)
     * @param str
     * @return
     */
    private static boolean isNumberString(String str) {
        // regex
        String pattern = "^\\d{12}$";

        // matching
        return str.matches(pattern);
    }

    // Using UUID for comparing equality of objects.
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Brand brand = (Brand) o;
        return Objects.equals(getUuid(), brand.getUuid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUuid());
    }

}
