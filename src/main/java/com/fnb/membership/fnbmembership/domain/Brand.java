package com.fnb.membership.fnbmembership.domain;

import lombok.Getter;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

/**
 * F&B Brand Information.
 */
@Entity
@Getter
public class Brand {

    /**
     * Brand ID.
     * The actual primary key used for utilizing the auto-increment feature of RDB,
     * which is a sequentially assigned key by the database for indexing performance purposes.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "BRAND_ID")
    private Long id;

    /**
     * Brand UUID
     * The sub key is used as a globally unique identifier for the entity, particularly when the data is saved in another data storage.
     * This key is generated by this application.
     */
    @Column(name = "BRAND_UUID", columnDefinition = "BINARY(16)", unique = true, updatable = false)
    private UUID uuid;

    @Column(name = "BRAND_NAME", unique = true)
    private String name;

    private LocalDateTime createdAt;

    protected Brand() {
    }

    private Brand(UUID uuid, String name, LocalDateTime createdAt) {

        this.uuid = uuid;
        this.name = name;
        this.createdAt = createdAt;
    }

    /**
     * Create a brand object.
     * @param name
     * @param createdAt
     * @return
     */
    public static Brand createBrand(@NotNull UUID uuid, @NotBlank String name, @NotNull LocalDateTime createdAt) {
        return new Brand(uuid, name, createdAt);
    }

    // Using UUID for comparing equality of objects.
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Brand brand = (Brand) o;
        return Objects.equals(getUuid(), brand.getUuid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUuid());
    }
}
